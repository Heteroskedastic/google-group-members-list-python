

import httplib2
import sys
import pprint

from apiclient.discovery import build
from oauth2client import tools
from oauth2client.file import Storage
from oauth2client.client import AccessTokenRefreshError
from oauth2client.client import OAuth2WebServerFlow


client_id = sys.argv[1]
client_secret = sys.argv[2]
group_key = sys.argv[3]

# The scope URL
scope = 'https://www.googleapis.com/auth/admin.directory.group'

# Create a flow object. This object holds the client_id, client_secret, and
# scope. It assists with OAuth 2.0 steps to get user authorization and
# credentials.
flow = OAuth2WebServerFlow(client_id, client_secret, scope)

def main():

    # Create a Storage object. This object holds the credentials that your
    # application needs to authorize access to the user's data. The name of the
    # credentials file is provided. If the file does not exist, it is
    # created. This object can only hold credentials for a single user, so
    # as-written, this script can only handle a single user.
    storage = Storage('credentials.dat')

    # The get() function returns the credentials for the Storage object. If no
    # credentials were found, None is returned.
    credentials = storage.get()

    # If no credentials are found or the credentials are invalid due to
    # expiration, new credentials need to be obtained from the authorization
    # server. The oauth2client.tools.run_flow() function attempts to open an
    # authorization server page in your default web browser. The server
    # asks the user to grant your application access to the user's data.
    # If the user grants access, the run_flow() function returns new credentials.
    # The new credentials are also stored in the supplied Storage object,
    # which updates the credentials.dat file.
    if credentials is None or credentials.invalid:
        credentials = tools.run_flow(flow, storage, tools.argparser.parse_args())

    # Create an httplib2.Http object to handle our HTTP requests, and authorize it
    # using the credentials.authorize() function.
    http = httplib2.Http()
    http = credentials.authorize(http)

    # The apiclient.discovery.build() function returns an instance of an API service
    # object can be used to make API calls. The object is constructed with
    # methods specific to the calendar API. The arguments provided are:
    #   name of the API ('calendar')
    #   version of the API you are using ('v3')
    #   authorized httplib2.Http() object that can be used for API calls
    #service = build('calendar', 'v3', http=http)
    service = build('admin', 'directory_v1', http=http)

    request = service.members().list(groupKey=group_key)

    # The execute() function on the HttpRequest object actually calls the API.
    # It returns a Python object built from the JSON response. You can print this
    # object or refer to the Books API documentation to determine its structure.
    response = request.execute()
    #pprint.pprint(response)

    # # Print out the list of groups
    if response and 'members' in response:
         instances = response['members']
         for instance in instances:
             print instance['email']
    else:
         print 'There are no members to list in this group.'

if __name__ == '__main__':
    main()
