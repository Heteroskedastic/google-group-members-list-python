#!/usr/bin/env python
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("-c", "--customer", help="email of customer group whose members to list")
parser.add_argument("-a", "--all", help="list members of all customer groups", action='store_true')
args = parser.parse_args()

import httplib2
import sys
import pprint

from apiclient.discovery import build
from oauth2client import tools
from oauth2client.file import Storage
from oauth2client.client import AccessTokenRefreshError
from oauth2client.client import OAuth2WebServerFlow

client_id = "<insert your client id here>"
client_secret = "<insert your client secret here>"
group_key = args.customer

# The scope URL
scope = 'https://www.googleapis.com/auth/admin.directory.group'

# Create a flow object. This object holds the client_id, client_secret, and
# scope. It assists with OAuth 2.0 steps to get user authorization and
# credentials.
flow = OAuth2WebServerFlow(client_id, client_secret, scope)


def main():
    # Create a Storage object. This object holds the credentials that your
    # application needs to authorize access to the user's data. The name of the
    # credentials file is provided. If the file does not exist, it is
    # created. This object can only hold credentials for a single user, so
    # as-written, this script can only handle a single user.
    storage = Storage('credentials.dat')

    # The get() function returns the credentials for the Storage object. If no
    # credentials were found, None is returned.
    credentials = storage.get()

    # If no credentials are found or the credentials are invalid due to
    # expiration, new credentials need to be obtained from the authorization
    # server. The oauth2client.tools.run_flow() function attempts to open an
    # authorization server page in your default web browser. The server
    # asks the user to grant your application access to the user's data.
    # If the user grants access, the run_flow() function returns new credentials.
    # The new credentials are also stored in the supplied Storage object,
    # which updates the credentials.dat file.
    if credentials is None or credentials.invalid:
        credentials = tools.run_flow(flow, storage, tools.argparser.parse_args())

    # Create an httplib2.Http object to handle our HTTP requests, and authorize it
    # using the credentials.authorize() function.
    http = httplib2.Http()
    http = credentials.authorize(http)

    # The apiclient.discovery.build() function returns an instance of an API service
    # object that can be used to make API calls. The object is constructed with
    # methods specific to the admin API. The arguments provided are:
    #   name of the API ('admin')
    #   version of the API you are using ('v1')
    #   authorized httplib2.Http() object that can be used for API calls
    service = build('admin', 'directory_v1', http=http)

    # if -a/all argument was used
    if args.all == True:
        secondary_request = service.groups().list(domain='<insert your domain here>')
        secondary_response = secondary_request.execute()
        if secondary_response and 'groups' in secondary_response:
            secondary_instances = secondary_response['groups']
            for secondary_instance in secondary_instances:
                print secondary_instance['name'] + ' (' + secondary_instance['email'] + ')' + ' has the following members: \n'
                request = service.members().list(groupKey=secondary_instance['email'])
                response = request.execute()
                if response and 'members' in response:
                    instances = response['members']
                    for instance in instances:
                        print instance['email']
                    print '\n'
                else:
                    print 'There are no members to list in this group.'
        else:
            print 'There are no groups to list in this domain.'
    else:
        request = service.members().list(groupKey=group_key)

        # The execute() function on the HttpRequest object actually calls the API.
        # It returns a Python object built from the JSON response. You can print this
        # object or refer to the Books API documentation to determine its structure.
        response = request.execute()
        # pprint.pprint(response)

        # Print out the member emails of specified group
        if response and 'members' in response:
            instances = response['members']
            for instance in instances:
                print instance['email']
        else:
            print
            'There are no members to list in this group.'

if __name__ == '__main__':
    main()
